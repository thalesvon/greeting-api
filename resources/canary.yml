AWSTemplateFormatVersion: 2010-09-09

Resources:
  syntheticsBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub cw-synthetics-results-${AWS::AccountId}-${AWS::Region}
  
  canaryRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /service-role/ 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - 
         PolicyName: "canaryPolicy"
         PolicyDocument:
           Version: "2012-10-17"
           Statement:
              - 
                Effect: "Allow"
                Action:
                  - 's3:PutObject'
                  - 's3:GetBucketLocation'
                Resource: !Sub ${syntheticsBucket.Arn}/*
              - 
                Effect: "Allow"
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cwsyn-*"
              - 
                Effect: "Allow"
                Action:
                  - 's3:ListAllMyBuckets'
                  - 'xray:PutTraceSegments'
                Resource: "*"
              - 
                Effect: "Allow"
                Action:
                  - 'cloudwatch:PutMetricData'
                Resource: "*"
                Condition:
                  StringEquals:
                    "cloudwatch:namespace": "CloudWatchSynthetics"
  syntheticsCanary:
    Type: "AWS::Synthetics::Canary"
    Properties:
      Name: greeting-api-canary
      Code: #required
        Handler: apiCanary.handler
        Script: |
          var synthetics = require('Synthetics');
          const log = require('SyntheticsLogger');
          const https = require('https');
          const http = require('http');

          const apiCanaryBlueprint = async function () {
              

              const verifyRequest = async function (requestOption,postData) {
                return new Promise((resolve, reject) => {
                  log.info("Making request with options: " + JSON.stringify(requestOption));
                  let req
                  if (requestOption.port === 443) {
                    req = https.request(requestOption);
                  } else {
                    req = http.request(requestOption);
                  }
                  req.on('response', (res) => {
                    log.info(`Status Code: ${res.statusCode}`)
                    log.info(`Response Headers: ${JSON.stringify(res.headers)}`)
                    //If the response status code is not a 2xx success code
                    if (res.statusCode < 200 || res.statusCode > 299) {
                      reject("Failed: " + requestOption.path);
                    }
                    res.on('data', (d) => {
                      log.info("Response: " + d);
                    });
                    res.on('end', () => {
                      resolve();
                    })
                  });

                  req.on('error', (error) => {
                    reject(error);
                  });

                  if (postData) {
                    req.write(postData);
                  }
                  req.end();
                });
              }
              function getRandomInt(min, max) {
                  min = Math.ceil(min);
                  max = Math.floor(max);
                  return Math.floor(Math.random() * (max - min + 1)) + min;
                  }

              const cities = ["Brasilia", "Dublin", "Munich", "Cork"];
              const times = ["moring","afternoon", "evening"];
              const days = ["Sunday","Monday","Tuesday","Wednesday","Thrusday","Friday","Saturday"];
              const names = ["Jarbas","Ragnar","Price","Cacau","Elvis","Rolda"];
              const postData = "{ \"callerName\": \""+names[getRandomInt(0,5)]+"\" }";
              const apiUrl = "tm8x65ekde.execute-api.eu-west-1.amazonaws.com"

              const headers = {"content-type":"application/json","day":days[getRandomInt(0,6)]}
              headers['User-Agent'] = [synthetics.getCanaryUserAgentString(), headers['User-Agent']].join(' ');
              const requestOptions = {"hostname":apiUrl,"method":"POST","path":"/dev/"+cities[getRandomInt(0,3)]+"?time="+times[getRandomInt(0,2)],"port":443}
              requestOptions['headers'] = headers;
              await verifyRequest(requestOptions,postData);
          };

          exports.handler = async () => {
              return await apiCanaryBlueprint();
          };
      ArtifactS3Location: !Sub s3://${syntheticsBucket}/canary/greeting-api-canary
      Schedule: 
        Expression: 'rate(1 minute)'
      ExecutionRoleArn: !GetAtt canaryRole.Arn
      RuntimeVersion: syn-nodejs-2.1
      Tags:
        - Key: blueprint
          Value: apicanary
      RunConfig:
        TimeoutInSeconds: 60
        MemoryInMB: 1024
        ActiveTracing: false
      StartCanaryAfterCreation: true